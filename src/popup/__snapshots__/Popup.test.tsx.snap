// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Popup should render correctly 1`] = `
<default_1>
  <div
    className="makeStyles-container-1"
  >
    <default_1
      title="Import Mnemonic"
    >
      <h3>
        Import Mnemonic
      </h3>
    </default_1>
    <Formik
      initialValues={
        Object {
          "confirmPassword": "",
          "mnemonic": "",
          "password": "",
        }
      }
      onSubmit={[Function]}
      validationSchema={
        ObjectSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_defaultDefault": [Function],
          "_deps": Array [],
          "_excludedEdges": Array [],
          "_exclusive": Object {},
          "_mutate": undefined,
          "_nodes": Array [
            "confirmPassword",
            "password",
            "mnemonic",
          ],
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "object",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "fields": Object {
            "confirmPassword": StringSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "required": true,
              },
              "_mutate": undefined,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {
                  null,
                },
                "refs": Map {
                  "password" => Reference {
                    "getter": [Function],
                    "isContext": false,
                    "isSibling": true,
                    "isValue": false,
                    "key": "password",
                    "map": undefined,
                    "path": "password",
                  },
                },
              },
              "_whitelistError": [Function],
              "tests": Array [
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
            "mnemonic": StringSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "required": true,
              },
              "_mutate": undefined,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "tests": Array [
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
            "password": StringSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_deps": Array [],
              "_exclusive": Object {
                "min": true,
                "required": true,
              },
              "_mutate": undefined,
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "string",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "tests": Array [
                [Function],
                [Function],
              ],
              "transforms": Array [
                [Function],
              ],
            },
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        }
      }
    >
      <Form
        className="form-mnemonic"
        onSubmit={[Function]}
      >
        <form
          action="#"
          className="form-mnemonic"
          onReset={[Function]}
          onSubmit={[Function]}
        >
          <WithStyles(ForwardRef(TextField))
            className="makeStyles-textField-3"
            error={false}
            fullWidth={true}
            label="Mnemonic"
            margin="normal"
            multiline={true}
            name="mnemonic"
            onBlur={[Function]}
            onChange={[Function]}
            rows="4"
            value=""
            variant="outlined"
          >
            <ForwardRef(TextField)
              className="makeStyles-textField-3"
              classes={
                Object {
                  "root": "MuiTextField-root",
                }
              }
              error={false}
              fullWidth={true}
              label="Mnemonic"
              margin="normal"
              multiline={true}
              name="mnemonic"
              onBlur={[Function]}
              onChange={[Function]}
              rows="4"
              value=""
              variant="outlined"
            >
              <WithStyles(ForwardRef(FormControl))
                className="MuiTextField-root makeStyles-textField-3"
                color="primary"
                disabled={false}
                error={false}
                fullWidth={true}
                margin="normal"
                required={false}
                variant="outlined"
              >
                <ForwardRef(FormControl)
                  className="MuiTextField-root makeStyles-textField-3"
                  classes={
                    Object {
                      "fullWidth": "MuiFormControl-fullWidth",
                      "marginDense": "MuiFormControl-marginDense",
                      "marginNormal": "MuiFormControl-marginNormal",
                      "root": "MuiFormControl-root",
                    }
                  }
                  color="primary"
                  disabled={false}
                  error={false}
                  fullWidth={true}
                  margin="normal"
                  required={false}
                  variant="outlined"
                >
                  <div
                    className="MuiFormControl-root MuiTextField-root makeStyles-textField-3 MuiFormControl-marginNormal MuiFormControl-fullWidth"
                  >
                    <WithStyles(ForwardRef(InputLabel))>
                      <ForwardRef(InputLabel)
                        classes={
                          Object {
                            "animated": "MuiInputLabel-animated",
                            "asterisk": "MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "filled": "MuiInputLabel-filled",
                            "focused": "Mui-focused",
                            "formControl": "MuiInputLabel-formControl",
                            "marginDense": "MuiInputLabel-marginDense",
                            "outlined": "MuiInputLabel-outlined",
                            "required": "Mui-required",
                            "root": "MuiInputLabel-root",
                            "shrink": "MuiInputLabel-shrink",
                          }
                        }
                      >
                        <WithStyles(ForwardRef(FormLabel))
                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                          classes={
                            Object {
                              "asterisk": "MuiInputLabel-asterisk",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "required": "Mui-required",
                            }
                          }
                          data-shrink={false}
                        >
                          <ForwardRef(FormLabel)
                            className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                            classes={
                              Object {
                                "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                "colorSecondary": "MuiFormLabel-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "filled": "MuiFormLabel-filled",
                                "focused": "Mui-focused Mui-focused",
                                "required": "Mui-required Mui-required",
                                "root": "MuiFormLabel-root",
                              }
                            }
                            data-shrink={false}
                          >
                            <label
                              className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                              data-shrink={false}
                            >
                              Mnemonic
                            </label>
                          </ForwardRef(FormLabel)>
                        </WithStyles(ForwardRef(FormLabel))>
                      </ForwardRef(InputLabel)>
                    </WithStyles(ForwardRef(InputLabel))>
                    <WithStyles(ForwardRef(OutlinedInput))
                      autoFocus={false}
                      fullWidth={true}
                      label={
                        <React.Fragment>
                          Mnemonic
                        </React.Fragment>
                      }
                      multiline={true}
                      name="mnemonic"
                      onBlur={[Function]}
                      onChange={[Function]}
                      rows="4"
                      value=""
                    >
                      <ForwardRef(OutlinedInput)
                        autoFocus={false}
                        classes={
                          Object {
                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                            "adornedStart": "MuiOutlinedInput-adornedStart",
                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused",
                            "input": "MuiOutlinedInput-input",
                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                            "marginDense": "MuiOutlinedInput-marginDense",
                            "multiline": "MuiOutlinedInput-multiline",
                            "notchedOutline": "MuiOutlinedInput-notchedOutline",
                            "root": "MuiOutlinedInput-root",
                          }
                        }
                        fullWidth={true}
                        label={
                          <React.Fragment>
                            Mnemonic
                          </React.Fragment>
                        }
                        multiline={true}
                        name="mnemonic"
                        onBlur={[Function]}
                        onChange={[Function]}
                        rows="4"
                        value=""
                      >
                        <WithStyles(ForwardRef(InputBase))
                          autoFocus={false}
                          classes={
                            Object {
                              "adornedEnd": "MuiOutlinedInput-adornedEnd",
                              "adornedStart": "MuiOutlinedInput-adornedStart",
                              "colorSecondary": "MuiOutlinedInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "input": "MuiOutlinedInput-input",
                              "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                              "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                              "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                              "inputMultiline": "MuiOutlinedInput-inputMultiline",
                              "marginDense": "MuiOutlinedInput-marginDense",
                              "multiline": "MuiOutlinedInput-multiline",
                              "notchedOutline": null,
                              "root": "MuiOutlinedInput-root",
                            }
                          }
                          fullWidth={true}
                          inputComponent="input"
                          multiline={true}
                          name="mnemonic"
                          onBlur={[Function]}
                          onChange={[Function]}
                          renderSuffix={[Function]}
                          rows="4"
                          type="text"
                          value=""
                        >
                          <ForwardRef(InputBase)
                            autoFocus={false}
                            classes={
                              Object {
                                "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "focused": "Mui-focused Mui-focused",
                                "formControl": "MuiInputBase-formControl",
                                "fullWidth": "MuiInputBase-fullWidth",
                                "input": "MuiInputBase-input MuiOutlinedInput-input",
                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                "root": "MuiInputBase-root MuiOutlinedInput-root",
                              }
                            }
                            fullWidth={true}
                            inputComponent="input"
                            multiline={true}
                            name="mnemonic"
                            onBlur={[Function]}
                            onChange={[Function]}
                            renderSuffix={[Function]}
                            rows="4"
                            type="text"
                            value=""
                          >
                            <div
                              className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl MuiInputBase-multiline MuiOutlinedInput-multiline"
                              onClick={[Function]}
                            >
                              <textarea
                                aria-invalid={false}
                                autoFocus={false}
                                className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline"
                                disabled={false}
                                name="mnemonic"
                                onAnimationStart={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                rows="4"
                                value=""
                              />
                              <WithStyles(ForwardRef(NotchedOutline))
                                className="MuiOutlinedInput-notchedOutline"
                                label={
                                  <React.Fragment>
                                    Mnemonic
                                  </React.Fragment>
                                }
                                labelWidth={0}
                                notched={false}
                              >
                                <ForwardRef(NotchedOutline)
                                  className="MuiOutlinedInput-notchedOutline"
                                  classes={
                                    Object {
                                      "legend": "PrivateNotchedOutline-legend-63",
                                      "legendLabelled": "PrivateNotchedOutline-legendLabelled-64",
                                      "legendNotched": "PrivateNotchedOutline-legendNotched-65",
                                      "root": "PrivateNotchedOutline-root-62",
                                    }
                                  }
                                  label={
                                    <React.Fragment>
                                      Mnemonic
                                    </React.Fragment>
                                  }
                                  labelWidth={0}
                                  notched={false}
                                >
                                  <fieldset
                                    aria-hidden={true}
                                    className="PrivateNotchedOutline-root-62 MuiOutlinedInput-notchedOutline"
                                  >
                                    <legend
                                      className="PrivateNotchedOutline-legendLabelled-64"
                                    >
                                      <span>
                                        Mnemonic
                                      </span>
                                    </legend>
                                  </fieldset>
                                </ForwardRef(NotchedOutline)>
                              </WithStyles(ForwardRef(NotchedOutline))>
                            </div>
                          </ForwardRef(InputBase)>
                        </WithStyles(ForwardRef(InputBase))>
                      </ForwardRef(OutlinedInput)>
                    </WithStyles(ForwardRef(OutlinedInput))>
                  </div>
                </ForwardRef(FormControl)>
              </WithStyles(ForwardRef(FormControl))>
            </ForwardRef(TextField)>
          </WithStyles(ForwardRef(TextField))>
          <WithStyles(ForwardRef(TextField))
            className="makeStyles-textField-3"
            fullWidth={true}
            label="Password"
            margin="normal"
            name="password"
            onBlur={[Function]}
            onChange={[Function]}
            type="password"
            value=""
            variant="outlined"
          >
            <ForwardRef(TextField)
              className="makeStyles-textField-3"
              classes={
                Object {
                  "root": "MuiTextField-root",
                }
              }
              fullWidth={true}
              label="Password"
              margin="normal"
              name="password"
              onBlur={[Function]}
              onChange={[Function]}
              type="password"
              value=""
              variant="outlined"
            >
              <WithStyles(ForwardRef(FormControl))
                className="MuiTextField-root makeStyles-textField-3"
                color="primary"
                disabled={false}
                error={false}
                fullWidth={true}
                margin="normal"
                required={false}
                variant="outlined"
              >
                <ForwardRef(FormControl)
                  className="MuiTextField-root makeStyles-textField-3"
                  classes={
                    Object {
                      "fullWidth": "MuiFormControl-fullWidth",
                      "marginDense": "MuiFormControl-marginDense",
                      "marginNormal": "MuiFormControl-marginNormal",
                      "root": "MuiFormControl-root",
                    }
                  }
                  color="primary"
                  disabled={false}
                  error={false}
                  fullWidth={true}
                  margin="normal"
                  required={false}
                  variant="outlined"
                >
                  <div
                    className="MuiFormControl-root MuiTextField-root makeStyles-textField-3 MuiFormControl-marginNormal MuiFormControl-fullWidth"
                  >
                    <WithStyles(ForwardRef(InputLabel))>
                      <ForwardRef(InputLabel)
                        classes={
                          Object {
                            "animated": "MuiInputLabel-animated",
                            "asterisk": "MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "filled": "MuiInputLabel-filled",
                            "focused": "Mui-focused",
                            "formControl": "MuiInputLabel-formControl",
                            "marginDense": "MuiInputLabel-marginDense",
                            "outlined": "MuiInputLabel-outlined",
                            "required": "Mui-required",
                            "root": "MuiInputLabel-root",
                            "shrink": "MuiInputLabel-shrink",
                          }
                        }
                      >
                        <WithStyles(ForwardRef(FormLabel))
                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                          classes={
                            Object {
                              "asterisk": "MuiInputLabel-asterisk",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "required": "Mui-required",
                            }
                          }
                          data-shrink={false}
                        >
                          <ForwardRef(FormLabel)
                            className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                            classes={
                              Object {
                                "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                "colorSecondary": "MuiFormLabel-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "filled": "MuiFormLabel-filled",
                                "focused": "Mui-focused Mui-focused",
                                "required": "Mui-required Mui-required",
                                "root": "MuiFormLabel-root",
                              }
                            }
                            data-shrink={false}
                          >
                            <label
                              className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                              data-shrink={false}
                            >
                              Password
                            </label>
                          </ForwardRef(FormLabel)>
                        </WithStyles(ForwardRef(FormLabel))>
                      </ForwardRef(InputLabel)>
                    </WithStyles(ForwardRef(InputLabel))>
                    <WithStyles(ForwardRef(OutlinedInput))
                      autoFocus={false}
                      fullWidth={true}
                      label={
                        <React.Fragment>
                          Password
                        </React.Fragment>
                      }
                      multiline={false}
                      name="password"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="password"
                      value=""
                    >
                      <ForwardRef(OutlinedInput)
                        autoFocus={false}
                        classes={
                          Object {
                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                            "adornedStart": "MuiOutlinedInput-adornedStart",
                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused",
                            "input": "MuiOutlinedInput-input",
                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                            "marginDense": "MuiOutlinedInput-marginDense",
                            "multiline": "MuiOutlinedInput-multiline",
                            "notchedOutline": "MuiOutlinedInput-notchedOutline",
                            "root": "MuiOutlinedInput-root",
                          }
                        }
                        fullWidth={true}
                        label={
                          <React.Fragment>
                            Password
                          </React.Fragment>
                        }
                        multiline={false}
                        name="password"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="password"
                        value=""
                      >
                        <WithStyles(ForwardRef(InputBase))
                          autoFocus={false}
                          classes={
                            Object {
                              "adornedEnd": "MuiOutlinedInput-adornedEnd",
                              "adornedStart": "MuiOutlinedInput-adornedStart",
                              "colorSecondary": "MuiOutlinedInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "input": "MuiOutlinedInput-input",
                              "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                              "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                              "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                              "inputMultiline": "MuiOutlinedInput-inputMultiline",
                              "marginDense": "MuiOutlinedInput-marginDense",
                              "multiline": "MuiOutlinedInput-multiline",
                              "notchedOutline": null,
                              "root": "MuiOutlinedInput-root",
                            }
                          }
                          fullWidth={true}
                          inputComponent="input"
                          multiline={false}
                          name="password"
                          onBlur={[Function]}
                          onChange={[Function]}
                          renderSuffix={[Function]}
                          type="password"
                          value=""
                        >
                          <ForwardRef(InputBase)
                            autoFocus={false}
                            classes={
                              Object {
                                "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "focused": "Mui-focused Mui-focused",
                                "formControl": "MuiInputBase-formControl",
                                "fullWidth": "MuiInputBase-fullWidth",
                                "input": "MuiInputBase-input MuiOutlinedInput-input",
                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                "root": "MuiInputBase-root MuiOutlinedInput-root",
                              }
                            }
                            fullWidth={true}
                            inputComponent="input"
                            multiline={false}
                            name="password"
                            onBlur={[Function]}
                            onChange={[Function]}
                            renderSuffix={[Function]}
                            type="password"
                            value=""
                          >
                            <div
                              className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                              onClick={[Function]}
                            >
                              <input
                                aria-invalid={false}
                                autoFocus={false}
                                className="MuiInputBase-input MuiOutlinedInput-input"
                                disabled={false}
                                name="password"
                                onAnimationStart={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                type="password"
                                value=""
                              />
                              <WithStyles(ForwardRef(NotchedOutline))
                                className="MuiOutlinedInput-notchedOutline"
                                label={
                                  <React.Fragment>
                                    Password
                                  </React.Fragment>
                                }
                                labelWidth={0}
                                notched={false}
                              >
                                <ForwardRef(NotchedOutline)
                                  className="MuiOutlinedInput-notchedOutline"
                                  classes={
                                    Object {
                                      "legend": "PrivateNotchedOutline-legend-63",
                                      "legendLabelled": "PrivateNotchedOutline-legendLabelled-64",
                                      "legendNotched": "PrivateNotchedOutline-legendNotched-65",
                                      "root": "PrivateNotchedOutline-root-62",
                                    }
                                  }
                                  label={
                                    <React.Fragment>
                                      Password
                                    </React.Fragment>
                                  }
                                  labelWidth={0}
                                  notched={false}
                                >
                                  <fieldset
                                    aria-hidden={true}
                                    className="PrivateNotchedOutline-root-62 MuiOutlinedInput-notchedOutline"
                                  >
                                    <legend
                                      className="PrivateNotchedOutline-legendLabelled-64"
                                    >
                                      <span>
                                        Password
                                      </span>
                                    </legend>
                                  </fieldset>
                                </ForwardRef(NotchedOutline)>
                              </WithStyles(ForwardRef(NotchedOutline))>
                            </div>
                          </ForwardRef(InputBase)>
                        </WithStyles(ForwardRef(InputBase))>
                      </ForwardRef(OutlinedInput)>
                    </WithStyles(ForwardRef(OutlinedInput))>
                  </div>
                </ForwardRef(FormControl)>
              </WithStyles(ForwardRef(FormControl))>
            </ForwardRef(TextField)>
          </WithStyles(ForwardRef(TextField))>
          <WithStyles(ForwardRef(TextField))
            className="makeStyles-textField-3"
            error={false}
            fullWidth={true}
            label="Confirm Password"
            margin="normal"
            name="confirmPassword"
            onBlur={[Function]}
            onChange={[Function]}
            type="password"
            value=""
            variant="outlined"
          >
            <ForwardRef(TextField)
              className="makeStyles-textField-3"
              classes={
                Object {
                  "root": "MuiTextField-root",
                }
              }
              error={false}
              fullWidth={true}
              label="Confirm Password"
              margin="normal"
              name="confirmPassword"
              onBlur={[Function]}
              onChange={[Function]}
              type="password"
              value=""
              variant="outlined"
            >
              <WithStyles(ForwardRef(FormControl))
                className="MuiTextField-root makeStyles-textField-3"
                color="primary"
                disabled={false}
                error={false}
                fullWidth={true}
                margin="normal"
                required={false}
                variant="outlined"
              >
                <ForwardRef(FormControl)
                  className="MuiTextField-root makeStyles-textField-3"
                  classes={
                    Object {
                      "fullWidth": "MuiFormControl-fullWidth",
                      "marginDense": "MuiFormControl-marginDense",
                      "marginNormal": "MuiFormControl-marginNormal",
                      "root": "MuiFormControl-root",
                    }
                  }
                  color="primary"
                  disabled={false}
                  error={false}
                  fullWidth={true}
                  margin="normal"
                  required={false}
                  variant="outlined"
                >
                  <div
                    className="MuiFormControl-root MuiTextField-root makeStyles-textField-3 MuiFormControl-marginNormal MuiFormControl-fullWidth"
                  >
                    <WithStyles(ForwardRef(InputLabel))>
                      <ForwardRef(InputLabel)
                        classes={
                          Object {
                            "animated": "MuiInputLabel-animated",
                            "asterisk": "MuiInputLabel-asterisk",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "filled": "MuiInputLabel-filled",
                            "focused": "Mui-focused",
                            "formControl": "MuiInputLabel-formControl",
                            "marginDense": "MuiInputLabel-marginDense",
                            "outlined": "MuiInputLabel-outlined",
                            "required": "Mui-required",
                            "root": "MuiInputLabel-root",
                            "shrink": "MuiInputLabel-shrink",
                          }
                        }
                      >
                        <WithStyles(ForwardRef(FormLabel))
                          className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                          classes={
                            Object {
                              "asterisk": "MuiInputLabel-asterisk",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "required": "Mui-required",
                            }
                          }
                          data-shrink={false}
                        >
                          <ForwardRef(FormLabel)
                            className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                            classes={
                              Object {
                                "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                "colorSecondary": "MuiFormLabel-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "filled": "MuiFormLabel-filled",
                                "focused": "Mui-focused Mui-focused",
                                "required": "Mui-required Mui-required",
                                "root": "MuiFormLabel-root",
                              }
                            }
                            data-shrink={false}
                          >
                            <label
                              className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                              data-shrink={false}
                            >
                              Confirm Password
                            </label>
                          </ForwardRef(FormLabel)>
                        </WithStyles(ForwardRef(FormLabel))>
                      </ForwardRef(InputLabel)>
                    </WithStyles(ForwardRef(InputLabel))>
                    <WithStyles(ForwardRef(OutlinedInput))
                      autoFocus={false}
                      fullWidth={true}
                      label={
                        <React.Fragment>
                          Confirm Password
                        </React.Fragment>
                      }
                      multiline={false}
                      name="confirmPassword"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="password"
                      value=""
                    >
                      <ForwardRef(OutlinedInput)
                        autoFocus={false}
                        classes={
                          Object {
                            "adornedEnd": "MuiOutlinedInput-adornedEnd",
                            "adornedStart": "MuiOutlinedInput-adornedStart",
                            "colorSecondary": "MuiOutlinedInput-colorSecondary",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused",
                            "input": "MuiOutlinedInput-input",
                            "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                            "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                            "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                            "inputMultiline": "MuiOutlinedInput-inputMultiline",
                            "marginDense": "MuiOutlinedInput-marginDense",
                            "multiline": "MuiOutlinedInput-multiline",
                            "notchedOutline": "MuiOutlinedInput-notchedOutline",
                            "root": "MuiOutlinedInput-root",
                          }
                        }
                        fullWidth={true}
                        label={
                          <React.Fragment>
                            Confirm Password
                          </React.Fragment>
                        }
                        multiline={false}
                        name="confirmPassword"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="password"
                        value=""
                      >
                        <WithStyles(ForwardRef(InputBase))
                          autoFocus={false}
                          classes={
                            Object {
                              "adornedEnd": "MuiOutlinedInput-adornedEnd",
                              "adornedStart": "MuiOutlinedInput-adornedStart",
                              "colorSecondary": "MuiOutlinedInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "input": "MuiOutlinedInput-input",
                              "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                              "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                              "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                              "inputMultiline": "MuiOutlinedInput-inputMultiline",
                              "marginDense": "MuiOutlinedInput-marginDense",
                              "multiline": "MuiOutlinedInput-multiline",
                              "notchedOutline": null,
                              "root": "MuiOutlinedInput-root",
                            }
                          }
                          fullWidth={true}
                          inputComponent="input"
                          multiline={false}
                          name="confirmPassword"
                          onBlur={[Function]}
                          onChange={[Function]}
                          renderSuffix={[Function]}
                          type="password"
                          value=""
                        >
                          <ForwardRef(InputBase)
                            autoFocus={false}
                            classes={
                              Object {
                                "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "focused": "Mui-focused Mui-focused",
                                "formControl": "MuiInputBase-formControl",
                                "fullWidth": "MuiInputBase-fullWidth",
                                "input": "MuiInputBase-input MuiOutlinedInput-input",
                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                "root": "MuiInputBase-root MuiOutlinedInput-root",
                              }
                            }
                            fullWidth={true}
                            inputComponent="input"
                            multiline={false}
                            name="confirmPassword"
                            onBlur={[Function]}
                            onChange={[Function]}
                            renderSuffix={[Function]}
                            type="password"
                            value=""
                          >
                            <div
                              className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                              onClick={[Function]}
                            >
                              <input
                                aria-invalid={false}
                                autoFocus={false}
                                className="MuiInputBase-input MuiOutlinedInput-input"
                                disabled={false}
                                name="confirmPassword"
                                onAnimationStart={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                type="password"
                                value=""
                              />
                              <WithStyles(ForwardRef(NotchedOutline))
                                className="MuiOutlinedInput-notchedOutline"
                                label={
                                  <React.Fragment>
                                    Confirm Password
                                  </React.Fragment>
                                }
                                labelWidth={0}
                                notched={false}
                              >
                                <ForwardRef(NotchedOutline)
                                  className="MuiOutlinedInput-notchedOutline"
                                  classes={
                                    Object {
                                      "legend": "PrivateNotchedOutline-legend-63",
                                      "legendLabelled": "PrivateNotchedOutline-legendLabelled-64",
                                      "legendNotched": "PrivateNotchedOutline-legendNotched-65",
                                      "root": "PrivateNotchedOutline-root-62",
                                    }
                                  }
                                  label={
                                    <React.Fragment>
                                      Confirm Password
                                    </React.Fragment>
                                  }
                                  labelWidth={0}
                                  notched={false}
                                >
                                  <fieldset
                                    aria-hidden={true}
                                    className="PrivateNotchedOutline-root-62 MuiOutlinedInput-notchedOutline"
                                  >
                                    <legend
                                      className="PrivateNotchedOutline-legendLabelled-64"
                                    >
                                      <span>
                                        Confirm Password
                                      </span>
                                    </legend>
                                  </fieldset>
                                </ForwardRef(NotchedOutline)>
                              </WithStyles(ForwardRef(NotchedOutline))>
                            </div>
                          </ForwardRef(InputBase)>
                        </WithStyles(ForwardRef(InputBase))>
                      </ForwardRef(OutlinedInput)>
                    </WithStyles(ForwardRef(OutlinedInput))>
                  </div>
                </ForwardRef(FormControl)>
              </WithStyles(ForwardRef(FormControl))>
            </ForwardRef(TextField)>
          </WithStyles(ForwardRef(TextField))>
          <WithStyles(ForwardRef(Button))
            className="makeStyles-button-2"
            color="primary"
            disabled={false}
            type="submit"
          >
            <ForwardRef(Button)
              className="makeStyles-button-2"
              classes={
                Object {
                  "colorInherit": "MuiButton-colorInherit",
                  "contained": "MuiButton-contained",
                  "containedPrimary": "MuiButton-containedPrimary",
                  "containedSecondary": "MuiButton-containedSecondary",
                  "containedSizeLarge": "MuiButton-containedSizeLarge",
                  "containedSizeSmall": "MuiButton-containedSizeSmall",
                  "disableElevation": "MuiButton-disableElevation",
                  "disabled": "Mui-disabled",
                  "endIcon": "MuiButton-endIcon",
                  "focusVisible": "Mui-focusVisible",
                  "fullWidth": "MuiButton-fullWidth",
                  "iconSizeLarge": "MuiButton-iconSizeLarge",
                  "iconSizeMedium": "MuiButton-iconSizeMedium",
                  "iconSizeSmall": "MuiButton-iconSizeSmall",
                  "label": "MuiButton-label",
                  "outlined": "MuiButton-outlined",
                  "outlinedPrimary": "MuiButton-outlinedPrimary",
                  "outlinedSecondary": "MuiButton-outlinedSecondary",
                  "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                  "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                  "root": "MuiButton-root",
                  "sizeLarge": "MuiButton-sizeLarge",
                  "sizeSmall": "MuiButton-sizeSmall",
                  "startIcon": "MuiButton-startIcon",
                  "text": "MuiButton-text",
                  "textPrimary": "MuiButton-textPrimary",
                  "textSecondary": "MuiButton-textSecondary",
                  "textSizeLarge": "MuiButton-textSizeLarge",
                  "textSizeSmall": "MuiButton-textSizeSmall",
                }
              }
              color="primary"
              disabled={false}
              type="submit"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiButton-root MuiButton-text makeStyles-button-2 MuiButton-textPrimary"
                component="button"
                disabled={false}
                focusRipple={true}
                focusVisibleClassName="Mui-focusVisible"
                type="submit"
              >
                <ForwardRef(ButtonBase)
                  className="MuiButton-root MuiButton-text makeStyles-button-2 MuiButton-textPrimary"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="button"
                  disabled={false}
                  focusRipple={true}
                  focusVisibleClassName="Mui-focusVisible"
                  type="submit"
                >
                  <button
                    className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-button-2 MuiButton-textPrimary"
                    disabled={false}
                    onBlur={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    tabIndex={0}
                    type="submit"
                  >
                    <span
                      className="MuiButton-label"
                    >
                      Import
                    </span>
                    <NoSsr>
                      <WithStyles(memo)
                        center={false}
                      >
                        <ForwardRef(TouchRipple)
                          center={false}
                          classes={
                            Object {
                              "child": "MuiTouchRipple-child",
                              "childLeaving": "MuiTouchRipple-childLeaving",
                              "childPulsate": "MuiTouchRipple-childPulsate",
                              "ripple": "MuiTouchRipple-ripple",
                              "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                              "rippleVisible": "MuiTouchRipple-rippleVisible",
                              "root": "MuiTouchRipple-root",
                            }
                          }
                        >
                          <span
                            className="MuiTouchRipple-root"
                          >
                            <TransitionGroup
                              childFactory={[Function]}
                              component={null}
                              exit={true}
                            />
                          </span>
                        </ForwardRef(TouchRipple)>
                      </WithStyles(memo)>
                    </NoSsr>
                  </button>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Button)>
          </WithStyles(ForwardRef(Button))>
        </form>
      </Form>
    </Formik>
  </div>
</default_1>
`;
